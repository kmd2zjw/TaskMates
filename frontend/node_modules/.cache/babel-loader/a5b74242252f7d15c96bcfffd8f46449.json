{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport useButton from '../useButton';\nimport { useListItem } from '../useList';\nimport { useCompoundItem } from '../utils/useCompoundItem';\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Unstyled Menu](https://mui.com/base/react-menu/#hooks)\r\n *\r\n * API:\r\n *\r\n * - [useMenuItem API](https://mui.com/base/react-menu/hooks-api/#use-menu-item)\r\n */\n\nexport default function useMenuItem(params) {\n  const {\n    disabled = false,\n    id: idParam,\n    ref: externalRef,\n    label\n  } = params;\n  const id = useId(idParam);\n  const itemRef = React.useRef(null);\n  const itemMetadata = React.useMemo(() => ({\n    disabled,\n    id: id != null ? id : '',\n    label,\n    ref: itemRef\n  }), [disabled, id, label]);\n  const {\n    getRootProps: getListRootProps,\n    highlighted,\n    ref: listItemRefHandler\n  } = useListItem({\n    item: id\n  });\n  const {\n    index,\n    totalItemCount\n  } = useCompoundItem(id, itemMetadata);\n  const {\n    getRootProps: getButtonProps,\n    focusVisible,\n    ref: buttonRefHandler\n  } = useButton({\n    disabled,\n    focusableWhenDisabled: true\n  });\n  const handleRef = useForkRef(listItemRefHandler, buttonRefHandler, externalRef, itemRef);\n  React.useDebugValue({\n    id,\n    highlighted,\n    disabled,\n    label\n  }); // If `id` is undefined (during SSR in React < 18), we fall back to rendering a simplified menu item\n  // which does not have access to infortmation about its position or highlighted state.\n\n  if (id === undefined) {\n    return {\n      getRootProps: function () {\n        let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        return _extends({}, otherHandlers, getButtonProps(otherHandlers), {\n          role: 'menuitem'\n        });\n      },\n      disabled: false,\n      focusVisible,\n      highlighted: false,\n      index: -1,\n      totalItemCount: 0,\n      ref: handleRef\n    };\n  }\n\n  const getRootProps = function () {\n    let otherHandlers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    const resolvedButtonProps = _extends({}, otherHandlers, getButtonProps(otherHandlers));\n\n    const resolvedMenuItemProps = _extends({}, resolvedButtonProps, getListRootProps(resolvedButtonProps));\n\n    return _extends({}, otherHandlers, resolvedButtonProps, resolvedMenuItemProps, {\n      role: 'menuitem',\n      ref: handleRef\n    });\n  };\n\n  return {\n    getRootProps,\n    disabled,\n    focusVisible,\n    highlighted,\n    index,\n    totalItemCount,\n    ref: handleRef\n  };\n}","map":{"version":3,"sources":["C:/Users/india/Desktop/CS4750Project/TaskMates/frontend/node_modules/@mui/base/useMenuItem/useMenuItem.js"],"names":["_extends","React","unstable_useId","useId","unstable_useForkRef","useForkRef","useButton","useListItem","useCompoundItem","useMenuItem","params","disabled","id","idParam","ref","externalRef","label","itemRef","useRef","itemMetadata","useMemo","getRootProps","getListRootProps","highlighted","listItemRefHandler","item","index","totalItemCount","getButtonProps","focusVisible","buttonRefHandler","focusableWhenDisabled","handleRef","useDebugValue","undefined","otherHandlers","role","resolvedButtonProps","resolvedMenuItemProps"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport * as React from 'react';\r\nimport { unstable_useId as useId, unstable_useForkRef as useForkRef } from '@mui/utils';\r\nimport useButton from '../useButton';\r\nimport { useListItem } from '../useList';\r\nimport { useCompoundItem } from '../utils/useCompoundItem';\r\n\r\n/**\r\n *\r\n * Demos:\r\n *\r\n * - [Unstyled Menu](https://mui.com/base/react-menu/#hooks)\r\n *\r\n * API:\r\n *\r\n * - [useMenuItem API](https://mui.com/base/react-menu/hooks-api/#use-menu-item)\r\n */\r\nexport default function useMenuItem(params) {\r\n  const {\r\n    disabled = false,\r\n    id: idParam,\r\n    ref: externalRef,\r\n    label\r\n  } = params;\r\n  const id = useId(idParam);\r\n  const itemRef = React.useRef(null);\r\n  const itemMetadata = React.useMemo(() => ({\r\n    disabled,\r\n    id: id != null ? id : '',\r\n    label,\r\n    ref: itemRef\r\n  }), [disabled, id, label]);\r\n  const {\r\n    getRootProps: getListRootProps,\r\n    highlighted,\r\n    ref: listItemRefHandler\r\n  } = useListItem({\r\n    item: id\r\n  });\r\n  const {\r\n    index,\r\n    totalItemCount\r\n  } = useCompoundItem(id, itemMetadata);\r\n  const {\r\n    getRootProps: getButtonProps,\r\n    focusVisible,\r\n    ref: buttonRefHandler\r\n  } = useButton({\r\n    disabled,\r\n    focusableWhenDisabled: true\r\n  });\r\n  const handleRef = useForkRef(listItemRefHandler, buttonRefHandler, externalRef, itemRef);\r\n  React.useDebugValue({\r\n    id,\r\n    highlighted,\r\n    disabled,\r\n    label\r\n  });\r\n\r\n  // If `id` is undefined (during SSR in React < 18), we fall back to rendering a simplified menu item\r\n  // which does not have access to infortmation about its position or highlighted state.\r\n  if (id === undefined) {\r\n    return {\r\n      getRootProps: (otherHandlers = {}) => _extends({}, otherHandlers, getButtonProps(otherHandlers), {\r\n        role: 'menuitem'\r\n      }),\r\n      disabled: false,\r\n      focusVisible,\r\n      highlighted: false,\r\n      index: -1,\r\n      totalItemCount: 0,\r\n      ref: handleRef\r\n    };\r\n  }\r\n  const getRootProps = (otherHandlers = {}) => {\r\n    const resolvedButtonProps = _extends({}, otherHandlers, getButtonProps(otherHandlers));\r\n    const resolvedMenuItemProps = _extends({}, resolvedButtonProps, getListRootProps(resolvedButtonProps));\r\n    return _extends({}, otherHandlers, resolvedButtonProps, resolvedMenuItemProps, {\r\n      role: 'menuitem',\r\n      ref: handleRef\r\n    });\r\n  };\r\n  return {\r\n    getRootProps,\r\n    disabled,\r\n    focusVisible,\r\n    highlighted,\r\n    index,\r\n    totalItemCount,\r\n    ref: handleRef\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}