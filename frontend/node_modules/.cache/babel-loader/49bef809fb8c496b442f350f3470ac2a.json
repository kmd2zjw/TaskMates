{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\india\\\\Desktop\\\\CS4750Project\\\\TaskMates\\\\frontend\\\\src\\\\pages\\\\Organizations.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { AppWrap } from '../wrapper';\nimport { useContext } from \"react\";\nimport { AuthContext } from \"../context/authContext\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Organizations = () => {\n  _s();\n\n  const [org, setOrg] = useState({});\n  const [tasks, setTask] = useState([]);\n  const location = useLocation();\n  const navigate = useNavigate();\n  const orgId = location.pathname.split(\"/\")[2];\n  const {\n    currentUser\n  } = useContext(AuthContext);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const res = await axios.get(`/orgs/${orgId}`);\n        setOrg(res.data);\n        const res1 = await axios.get(`/tasks/getGroupTasks/${orgId}`);\n        setTask(res1.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    fetchData();\n  }, [orgId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Organizations This is org page.\", /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" GroupID: \", org.groupID]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\" GroupName: \", org.groupName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"./createtask\",\n      children: \"click here to make a task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"GROUP TASKS:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), tasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"org\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Title: \", task.task_name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Description: \", task.description]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Due on: \", task.due_date]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `./task/${task.taskID}`,\n          children: \"View\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 15\n      }, this)]\n    }, task.taskID, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Organizations, \"eqs1Cu9xrOPNfeDVq/F8xfb5tvQ=\", false, function () {\n  return [useLocation, useNavigate];\n});\n\n_c = Organizations;\nexport default _c2 = AppWrap(Organizations, \"Organizations\");\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Organizations\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/india/Desktop/CS4750Project/TaskMates/frontend/src/pages/Organizations.jsx"],"names":["React","useEffect","useState","Link","useLocation","useNavigate","axios","AppWrap","useContext","AuthContext","moment","Organizations","org","setOrg","tasks","setTask","location","navigate","orgId","pathname","split","currentUser","fetchData","res","get","data","res1","err","console","log","groupID","groupName","map","task","task_name","description","due_date","taskID"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,WAAf,EAA4BC,WAA5B,QAA+C,kBAA/C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAOC,MAAP,MAAmB,QAAnB;;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBX,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM,CAACY,KAAD,EAAQC,OAAR,IAAmBb,QAAQ,CAAC,EAAD,CAAjC;AAEA,QAAMc,QAAQ,GAAGZ,WAAW,EAA5B;AACA,QAAMa,QAAQ,GAAGZ,WAAW,EAA5B;AAEA,QAAMa,KAAK,GAAGF,QAAQ,CAACG,QAAT,CAAkBC,KAAlB,CAAwB,GAAxB,EAA6B,CAA7B,CAAd;AAEA,QAAM;AAAEC,IAAAA;AAAF,MAAkBb,UAAU,CAACC,WAAD,CAAlC;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,SAAS,GAAG,YAAY;AAC5B,UAAI;AACF,cAAMC,GAAG,GAAG,MAAMjB,KAAK,CAACkB,GAAN,CAAW,SAAQN,KAAM,EAAzB,CAAlB;AACAL,QAAAA,MAAM,CAACU,GAAG,CAACE,IAAL,CAAN;AACA,cAAMC,IAAI,GAAG,MAAMpB,KAAK,CAACkB,GAAN,CAAW,wBAAuBN,KAAM,EAAxC,CAAnB;AACAH,QAAAA,OAAO,CAACW,IAAI,CAACD,IAAN,CAAP;AACD,OALD,CAKE,OAAOE,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,KATD;;AAUAL,IAAAA,SAAS;AACV,GAZQ,EAYN,CAACJ,KAAD,CAZM,CAAT;AAcA,sBACI;AAAA,+DAEI;AAAA,+BAAgBN,GAAG,CAACkB,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA,iCAAkBlB,GAAG,CAACmB,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII,QAAC,IAAD;AAAM,MAAA,EAAE,EAAC,cAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,EAQKjB,KAAK,CAACkB,GAAN,CAAWC,IAAD,iBACX;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE;AAAA,8BAAYA,IAAI,CAACC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,oCAAkBD,IAAI,CAACE,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,+BAAaF,IAAI,CAACG,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,EAAE,EAAG,UAASH,IAAI,CAACI,MAAO,EAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA,OAA0BJ,IAAI,CAACI,MAA/B;AAAA;AAAA;AAAA;AAAA,YADC,CARL;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA4BH,CArDD;;GAAM1B,a;UAIeP,W,EACAC,W;;;KALfM,a;AAuDN,qBAAeJ,OAAO,CAACI,aAAD,EAAgB,eAAhB,CAAtB","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { AppWrap } from '../wrapper';\r\nimport { useContext } from \"react\";\r\nimport { AuthContext } from \"../context/authContext\";\r\nimport moment from \"moment\"\r\n\r\nconst Organizations = () => {\r\n    const [org, setOrg] = useState({});\r\n    const [tasks, setTask] = useState([]);\r\n\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n  \r\n    const orgId = location.pathname.split(\"/\")[2];\r\n  \r\n    const { currentUser } = useContext(AuthContext);\r\n  \r\n    useEffect(() => {\r\n      const fetchData = async () => {\r\n        try {\r\n          const res = await axios.get(`/orgs/${orgId}`);\r\n          setOrg(res.data);\r\n          const res1 = await axios.get(`/tasks/getGroupTasks/${orgId}`);\r\n          setTask(res1.data);\r\n        } catch (err) {\r\n          console.log(err);\r\n        }\r\n      };\r\n      fetchData();\r\n    }, [orgId]);\r\n\r\n    return (\r\n        <div>Organizations\r\n            This is org page.\r\n            <div> GroupID: {org.groupID}</div>\r\n            <div> GroupName: {org.groupName}</div>\r\n            <Link to=\"./createtask\">\r\n                click here to make a task\r\n            </Link>\r\n            <h1>GROUP TASKS:</h1>\r\n            {tasks.map((task) => (\r\n            <div className=\"org\" key={task.taskID}>\r\n              <h2>Title: {task.task_name}</h2>\r\n              <h4>Description: {task.description}</h4>\r\n              <h4>Due on: {task.due_date}</h4>\r\n              <button>\r\n                <Link to={`./task/${task.taskID}`}>\r\n                    View\r\n                </Link>\r\n              </button>\r\n              \r\n              \r\n              \r\n            </div>\r\n            ))}\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default AppWrap(Organizations, \"Organizations\");"]},"metadata":{},"sourceType":"module"}